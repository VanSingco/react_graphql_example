# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query{
    req_user: User!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]
    post(id: ID!): Post!
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput ): [User]!
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput ): [Post]!
    comments(query: String, first: Int, skip: Int, after: String, orderBy: CommentOrderByInput ): [Comment]!
}

type Mutation {
    loginUser(data: LoginUser): AuthPayload!
    createUser(data: CreateUserInput!) : AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!) : User!
    createPost(data: CreatePostInput!) : Post!
    updatePost(id: ID!, data: UpdatePostInput!) : Post!
    deletePost(id: ID!) : Post!
    createComment(data: CreateCommentInput!) : Comment!
    updateComment(id: ID!, data: UpdateCommentInput!) : Comment!
    deleteComment(id: ID!) : Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayLoad!
    post: PostSubscriptionPayLoad!
    myPost: PostSubscriptionPayLoad!
}

type AuthPayload {
    token: String!
    user: User!
}

input LoginUser {
    email: String!
    password: String!
}

input CreateUserInput {
    username: String! 
    email: String! 
    name: String! 
    password: String!
}

input UpdateUserInput {
    username: String 
    email: String
    name: String
    password: String
}

input CreatePostInput {
    title: String! 
    content: String!
    isPublished: Boolean!
}

input UpdatePostInput {
    title: String 
    content: String
    isPublished: Boolean 
}

input CreateCommentInput {
    content: String! 
    author: ID! 
    post: ID!
}

input UpdateCommentInput {
    content: String!
}

type User {
    id: ID
    username: String!
    name: String! 
    email: String
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Post {
    id: ID
    title: String!
    content: String!
    isPublished: Boolean!
    author: User!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Comment {
    id: ID!
    content: String!
    post: Post!
    author: User!
    updatedAt: String!
    createdAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayLoad {
    mutation: MutationType!
    node: Post!
}

type CommentSubscriptionPayLoad {
    mutation: MutationType!
    node: Comment!
}